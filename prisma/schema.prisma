// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Category {
  ETC
  MUSIC
  MOVIE
  GAME
  SPORTS
  LEARNING
}

model Post {
  id        Int     @id @default(autoincrement())
  category  Category @default(ETC)
  title     String
  content   String
  videoId String
  userId  String
  like Int @default(0)
  view Int @default(0)
  user    User?   @relation(fields: [userId], references: [id])
  comments Comment[]
  Likes Like[]
}

model Comment {
  id  Int     @id @default(autoincrement())
  userId             String
  postId         Int
  content String
  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  post Post @relation(fields:[postId], references:[id], onDelete: Cascade)
}

model Like {
  id String @default(cuid()) @id
  userId String
  postId Int
  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  post Post @relation(fields:[postId], references:[id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  refresh_token_expires_in Int?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  comments      Comment[] 
  posts         Post[]
  likes Like[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
